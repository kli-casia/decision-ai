import zmq
import numpy as np
import msagent.examples.ppo.learner.Learner as Player
from msagent.msagent.league.coordinator import pfsp
from msagent.msagent.league.main_agent import MainAgent


class MainExploiter():
    def __init__(self, agent):
        self.pre_trained_agent = agent
        self.agent = agent
        self.gen = 1
        self.model_key = "main_exploiter_{}".format(self.gen)
        self.context = zmq.Context()
    
    def get_match(self):
        main_agents = [player for player in self.payoff.players if isinstance(player, MainAgent)]
        opponent = np.random.choice(main_agents)

        if self.payoff[self, opponent] > 0.1:
            return opponent
        
        historical = [player for player in self.payoff.players if isinstance(player, MainAgent)]
        win_rates = self.payoff[self, historical]
        return np.random.choice(historical, p=pfsp(win_rates, weighting="variance"))
    
    def create_checkpoint(self):
        self.pool_req_sock = self.context(zmq.REQ)
        self.pool_req_sock.connect("tcp://127.0.0.1:3421")
        self.pool_req_sock.send_string("write", zmq.SNDMORE)
        self.pool_req_sock.send_pyobj(self.agent)
        msg = self.pool_req_sock.recv_string()
        self.gen += 1